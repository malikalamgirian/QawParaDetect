/*
 * QawParaDetectView.java
 */
package qawparadetect;

import com.malikalamgirian.qaw.fyp.*;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import weka.classifiers.Evaluation;
import weka.core.*;
import weka.core.converters.ConverterUtils.DataSource;
import weka.classifiers.functions.*;

/**
 * The application's main frame.
 */
public class QawParaDetectView extends FrameView {

    public QawParaDetectView(SingleFrameApplication app) {
        super(app);

        initComponents();


            /*
             * Set Labels to some defaults
             */
            //        lblPredictedPairQuality.setText("--");
            //        lblTesterAnnotatedPairQuality.setText("Select");
            //        lblClassificationResult.setText("--");

        try {
            /*
             * QawParaphraseDetector initialization
             */
            qawParaphraseDetector = new QawParaphraseDetector();
        } catch (Exception ex) {
            System.out.println("Initialization failure. " + ex.getMessage());
        }

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = QawParaDetectApp.getApplication().getMainFrame();
            aboutBox = new QawParaDetectAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        QawParaDetectApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtString1 = new javax.swing.JTextField();
        txtString2 = new javax.swing.JTextField();
        btnParaphrase = new javax.swing.JButton();
        btnNotParaphrase = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblTesterAnnotatedPairQuality = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPredictedPairQuality = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblClassificationResult = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(qawparadetect.QawParaDetectApp.class).getContext().getResourceMap(QawParaDetectView.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), resourceMap.getColor("jPanel1.border.titleColor"))); // NOI18N
        jPanel1.setToolTipText(resourceMap.getString("jPanel1.toolTipText")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setToolTipText(resourceMap.getString("jLabel1.toolTipText")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        txtString1.setFont(resourceMap.getFont("txtString1.font")); // NOI18N
        txtString1.setText(resourceMap.getString("txtString1.text")); // NOI18N
        txtString1.setName("txtString1"); // NOI18N

        txtString2.setFont(resourceMap.getFont("txtString2.font")); // NOI18N
        txtString2.setText(resourceMap.getString("txtString2.text")); // NOI18N
        txtString2.setName("txtString2"); // NOI18N

        btnParaphrase.setFont(resourceMap.getFont("btnParaphrase.font")); // NOI18N
        btnParaphrase.setForeground(resourceMap.getColor("btnParaphrase.foreground")); // NOI18N
        btnParaphrase.setText(resourceMap.getString("btnParaphrase.text")); // NOI18N
        btnParaphrase.setName("btnParaphrase"); // NOI18N
        btnParaphrase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParaphraseActionPerformed(evt);
            }
        });

        btnNotParaphrase.setFont(resourceMap.getFont("btnNotParaphrase.font")); // NOI18N
        btnNotParaphrase.setForeground(resourceMap.getColor("btnNotParaphrase.foreground")); // NOI18N
        btnNotParaphrase.setText(resourceMap.getString("btnNotParaphrase.text")); // NOI18N
        btnNotParaphrase.setName("btnNotParaphrase"); // NOI18N
        btnNotParaphrase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotParaphraseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtString1, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnParaphrase, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNotParaphrase, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(txtString2, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtString1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtString2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnParaphrase, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNotParaphrase, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnNotParaphrase, btnParaphrase});

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel3.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel3.border.titleFont"), resourceMap.getColor("jPanel3.border.titleColor"))); // NOI18N
        jPanel3.setForeground(resourceMap.getColor("jPanel3.foreground")); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        lblTesterAnnotatedPairQuality.setFont(resourceMap.getFont("lblTesterAnnotatedPairQuality.font")); // NOI18N
        lblTesterAnnotatedPairQuality.setIcon(resourceMap.getIcon("lblTesterAnnotatedPairQuality.icon")); // NOI18N
        lblTesterAnnotatedPairQuality.setText(resourceMap.getString("lblTesterAnnotatedPairQuality.text")); // NOI18N
        lblTesterAnnotatedPairQuality.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lblTesterAnnotatedPairQuality.setName("lblTesterAnnotatedPairQuality"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        lblPredictedPairQuality.setFont(resourceMap.getFont("lblPredictedPairQuality.font")); // NOI18N
        lblPredictedPairQuality.setIcon(resourceMap.getIcon("lblPredictedPairQuality.icon")); // NOI18N
        lblPredictedPairQuality.setText(resourceMap.getString("lblPredictedPairQuality.text")); // NOI18N
        lblPredictedPairQuality.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lblPredictedPairQuality.setName("lblPredictedPairQuality"); // NOI18N

        jLabel8.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        lblClassificationResult.setFont(resourceMap.getFont("lblClassificationResult.font")); // NOI18N
        lblClassificationResult.setIcon(resourceMap.getIcon("lblClassificationResult.icon")); // NOI18N
        lblClassificationResult.setText(resourceMap.getString("lblClassificationResult.text")); // NOI18N
        lblClassificationResult.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lblClassificationResult.setName("lblClassificationResult"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(lblTesterAnnotatedPairQuality, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(lblPredictedPairQuality, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(lblClassificationResult, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTesterAnnotatedPairQuality)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPredictedPairQuality)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblClassificationResult)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(82, 82, 82))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(750, 750, 750))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1051, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(qawparadetect.QawParaDetectApp.class).getContext().getActionMap(QawParaDetectView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 891, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void btnParaphraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParaphraseActionPerformed
        /*
         * Update label for annotated pair quality
         */
        setLblTesterAnnotatedPairQuality(1);

        /*
         * Update pair_Quality_Annotation_By_Tester variable
         */
        pair_Quality_Annotation_By_Tester = 1;

        /*
         * Create sentence pair object, and Pass for classification
         */
        sentencePairEntered = new SentencePair(Long.parseLong(now("ssmmhh")), Long.parseLong(now("hhmmss")), txtString1.getText(), txtString2.getText(), (int) pair_Quality_Annotation_By_Tester);
        
        /*
         * Classify instance, using Machine learning module
         */
        try {
            if(qawParaphraseDetector.classifyInstance(sentencePairEntered) == true){
                predicted_Pair_Quality = 1;
            }
            else {
                predicted_Pair_Quality = 0;
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        /*
         * Set predicted_Pair_Quality
         */
        setLblPredictedPairQuality(predicted_Pair_Quality);

        /*
         * Show Results
         */
        setLblClassificationResult(pair_Quality_Annotation_By_Tester, predicted_Pair_Quality);
    }//GEN-LAST:event_btnParaphraseActionPerformed

    private void btnNotParaphraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotParaphraseActionPerformed
        /*
         * Update label for annotated pair quality
         */
        setLblTesterAnnotatedPairQuality(0);

        /*
         * Update pair_Quality_Annotation_By_Tester variable
         */
        pair_Quality_Annotation_By_Tester = 0;

         /*
         * Create sentence pair object, and Pass for classification
         */
        sentencePairEntered = new SentencePair(Long.parseLong(now("ssmmhh")), Long.parseLong(now("hhmmss")), txtString1.getText(), txtString2.getText(), (int) pair_Quality_Annotation_By_Tester);
        
         /*
         * Classify instance, using Machine learning module
         */
        try {
            if(qawParaphraseDetector.classifyInstance(sentencePairEntered) == true){
                predicted_Pair_Quality = 1;
            }
            else {
                predicted_Pair_Quality = 0;
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        /*
         * Set predicted_Pair_Quality
         */
        setLblPredictedPairQuality(predicted_Pair_Quality);

        /*
         * Show Results
         */
        setLblClassificationResult(pair_Quality_Annotation_By_Tester, predicted_Pair_Quality);

    }//GEN-LAST:event_btnNotParaphraseActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNotParaphrase;
    private javax.swing.JButton btnParaphrase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblClassificationResult;
    private javax.swing.JLabel lblPredictedPairQuality;
    private javax.swing.JLabel lblTesterAnnotatedPairQuality;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField txtString1;
    private javax.swing.JTextField txtString2;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;

    public void setLblClassificationResult(double pair_Quality_Annotation_By_Tester,
            double predicted_Pair_Quality) {
        if (pair_Quality_Annotation_By_Tester == predicted_Pair_Quality) {
            lblClassificationResult.setText("Correct");
            lblClassificationResult.setForeground(Color.BLUE);
            lblClassificationResult.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qawparadetect/resources/happy.png")));
        } else if (pair_Quality_Annotation_By_Tester != predicted_Pair_Quality) {
            lblClassificationResult.setText("Incorrect");
            lblClassificationResult.setForeground(Color.red);
            lblClassificationResult.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qawparadetect/resources/saddy.png")));
        }
    }

    public void setLblPredictedPairQuality(double predicted_Pair_Quality) {
        if (predicted_Pair_Quality == 0) {
            lblPredictedPairQuality.setText("Not Paraphrase");
            lblPredictedPairQuality.setIcon(null);
            lblPredictedPairQuality.setForeground(Color.red);
        } else if (predicted_Pair_Quality == 1) {
            lblPredictedPairQuality.setText("Paraphrase");
            lblPredictedPairQuality.setIcon(null);
            lblPredictedPairQuality.setForeground(Color.BLUE);
        }
    }

    public void setLblTesterAnnotatedPairQuality(double pair_Quality_Annotation_By_Tester) {
        if (pair_Quality_Annotation_By_Tester == 0) {
            lblTesterAnnotatedPairQuality.setText("Not Paraphrase");
            lblTesterAnnotatedPairQuality.setIcon(null);
            lblTesterAnnotatedPairQuality.setForeground(Color.red);
        } else if (pair_Quality_Annotation_By_Tester == 1) {
            lblTesterAnnotatedPairQuality.setText("Paraphrase");
            lblTesterAnnotatedPairQuality.setIcon(null);
            lblTesterAnnotatedPairQuality.setForeground(Color.BLUE);
        }
    }

//    private void process(SentencePair[] sentencePairArray) throws Exception {
//        /*
//         * this method sets "predicted_Pair_Quality" for given pair
//         */
//        try {
//            /*
//             * Convert array to TEXT dataset
//             */
//            text_File_To_Process = now("MMMMM_yyyy_dd_hh_mm_ss");
//            FileSystemManager.createDirectory(text_File_To_Process);
//            text_File_To_Process = text_File_To_Process + File.separatorChar + text_File_To_Process;
//            sentencePairToTextDataset = new SentencePairToTextDataset();
//            sentencePairToTextDataset.setSentencePair(sentencePairArray);
//            sentencePairToTextDataset.setText_File_Path_To_Save(text_File_To_Process + ".txt");
//            sentencePairToTextDataset.convert();
//
//            /*
//             * Convert TEXT dataset to XML
//             */
//            txtToXmlConvertor = new TxtToXmlConvertor(sentencePairToTextDataset.getText_File_Path_To_Save());
//
//            /*
//             * Convert XML dataset to arff file
//             */
//            /*
//             * Set properties for XmlToFeatureVectorProcessor
//             */
//            properties = new Properties();
//            properties.setInput_XML_File_URL(txtToXmlConvertor.getXml_Output_File_URL());
//
//            /*
//             * call XmlToFeatureVectorProcessor
//             *
//             * this processes XML to "standard_Similarity_Analysed_File_URL"
//             */
//            xmlToFeatureVectorProcessor = new XmlToFeatureVectorProcessor(properties);
//            xmlToFeatureVectorProcessor = null;
//            System.gc();
//
//            /*
//             * Extract features from "standard_Similarity_Analysed_File_URL"
//             */
//            featureExtractor = new FeatureExtractor(properties);
//            featureExtractor = null;
//            System.gc();
//
//            /*
//             * Select features
//             */
//            nonMonotonicFeatureSelector = new NonMonotonicFeatureSelector(properties);
//            nonMonotonicFeatureSelector = null;
//            System.gc();
//
//            /*
//             * Convert CSV file to ARFF file
//             */
//            csvToArff = new CsvToArff(properties.getNon_Monotonic_Features_Selected_File_URL());
//
//            /*
//             * Classify
//             */
//            /*
//             * Load training and testing data
//             *
//             * also set class attributes
//             */
//            Instances train = DataSource.read("/home/wasif/Desktop/experimentation/1_4_12_2010/experimentation_Corpora_Sets/bestSystem/MSRPC_TRAIN_MODIFIED/msr_paraphrase_train_modified_xml_best_system_features_extracted_non_monotonic_selected_complete_10_features.arff");
//            train.setClassIndex(train.numAttributes() - 1);
//
//            Instances test = DataSource.read(csvToArff.getOutput_ARFF_File_Path_Name());
//            test.setClassIndex(test.numAttributes() - 1);
//
//            // train classifier
//            SGD classifier = new SGD();
//
//            /*
//             * Set options
//             */
//            //classifier.setDontNormalize(false);
//            //classifier.setDontReplaceMissing(true);
//            //classifier.setEpochs(140);
//            //classifier.setLambda(0.0001);
//            //classifier.setLearningRate(0.005);
//            //classifier.setSeed(2);
//            String[] options = Utils.splitOptions("-F 1 -L 0.005 -R 1.0E-4 -E 140 -N");
//            classifier.setOptions(options);
//
//            /*
//             * Build Classifier
//             */
//            classifier.buildClassifier(train);
//
//            /*
//             * Classify the first instance
//             */
//            predicted_Pair_Quality = classifier.classifyInstance(test.firstInstance());
//
//            /*
//             * Evaluate classifier and print some statistics of complete dataset on Console
//             */
//            Evaluation evaluation = new Evaluation(train);
//            evaluation.evaluateModel(classifier, test);
//
//
//            System.out.println("-----------------------------------------------------");
//            System.out.println(evaluation.toSummaryString("\nResults\n======\n", false));
//            System.out.println(evaluation.toMatrixString("\nConfusion Matrix\n======\n"));
//            System.out.println("-----------------------------------------------------");
//
//
//        } catch (Exception e) {
//            throw new Exception("process() got some problem.");
//        }
//    }

    public static String now(String dateFormat) {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
        return sdf.format(cal.getTime());
    }

    /*
     * Manual Declarations
     */
    private double pair_Quality_Annotation_By_Tester;
    private double predicted_Pair_Quality;
    private long string1Id;
    private long string2Id;
    private SentencePair sentencePairEntered = null;
    private SentencePair[] sentencePairArray = null;
    private SentencePairToTextDataset sentencePairToTextDataset = null;
    private TxtToXmlConvertor txtToXmlConvertor = null;
    private Properties properties = null;
    private XmlToFeatureVectorProcessor xmlToFeatureVectorProcessor = null;
    private FeatureExtractor featureExtractor = null;
    private NonMonotonicFeatureSelector nonMonotonicFeatureSelector = null;
    private CsvToArff csvToArff = null;
    private String text_File_To_Process = null;
    private QawParaphraseDetector qawParaphraseDetector = null;
}
